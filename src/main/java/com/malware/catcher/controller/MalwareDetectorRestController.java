package com.malware.catcher.controller;

import com.github.dozermapper.core.DozerBeanMapperBuilder;
import com.github.dozermapper.core.Mapper;
import com.malware.catcher.dto.DetectionDataDto;
import com.malware.catcher.dto.MalwareDetectorStoreRequestDto;
import com.malware.catcher.dto.MalwareDetectorResponseDto;
import com.malware.catcher.dto.RetrieveRequestDto;
import com.malware.catcher.model.DetectionData;
import com.malware.catcher.model.DeviceData;
import com.malware.catcher.service.MalwareDetectorRetrieveService;
import com.malware.catcher.service.MalwareDetectorStoreService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;
import java.util.List;

@RestController
public class MalwareDetectorRestController {

    private static final Logger logger = LoggerFactory.getLogger(MalwareDetectorRestController.class);

    @Autowired
    MalwareDetectorStoreService malwareDetectorStoreService;

    @Autowired
    MalwareDetectorRetrieveService malwareDetectorRetrieveService;

    @PostMapping("/store")
    public ResponseEntity<MalwareDetectorResponseDto> detectAndStoreMalware(@RequestBody MalwareDetectorStoreRequestDto detectorRequest) throws Exception {

        List<DetectionData> detectionDataList = new ArrayList<>();
        DetectionData detectionData;

        try {
            Mapper dozerMapper = DozerBeanMapperBuilder.create().withMappingFiles("dozer-mapper.xml").build();

            DeviceData deviceData = dozerMapper.map(detectorRequest.getDeviceData(), DeviceData.class);

            for (DetectionDataDto detectionDataDto : detectorRequest.getDetectionDataList()) {
                detectionData = dozerMapper.map(detectionDataDto, DetectionData.class);
                detectionData.setDeviceData(deviceData);
                detectionDataList.add(detectionData);
            }

            deviceData.setDetectionDataList(detectionDataList);

            malwareDetectorStoreService.detectAndStoreMalware(deviceData, detectionDataList);
        } catch (Exception e) {
            logger.error(e.getLocalizedMessage());
            throw e;
        }

        return new ResponseEntity(HttpStatus.OK);
    }

    @GetMapping("/retrieve")
    public ResponseEntity<List<MalwareDetectorResponseDto>> retrieveMalwares(RetrieveRequestDto retrieveRequestDto) {

        List<MalwareDetectorResponseDto> malwareDetectorResponseDtoList;
        try {
            malwareDetectorResponseDtoList = malwareDetectorRetrieveService.retrieveMalwares(retrieveRequestDto);
        } catch (Exception e) {
            logger.error(e.getLocalizedMessage());
            throw e;
        }

        return new ResponseEntity<>(malwareDetectorResponseDtoList, HttpStatus.OK);
    }

}
