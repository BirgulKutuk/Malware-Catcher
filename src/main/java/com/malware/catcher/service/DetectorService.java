package com.malware.catcher.service;

import com.malware.catcher.dto.DetectorRequestDto;
import com.malware.catcher.model.DetectionData;
import com.malware.catcher.model.DeviceData;
import com.malware.catcher.model.EnumDetectionTypes;
import com.malware.catcher.model.EnumDeviceType;
import com.malware.catcher.repository.DetectionDataRepository;
import com.malware.catcher.repository.DeviceDataRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class DetectorService {

    private static final Logger logger = LoggerFactory.getLogger(DetectorService.class);

    @Autowired
    DeviceDataRepository deviceDataRepository;

    @Autowired
    DetectionDataRepository detectionDataRepository;

    public void detectAndStoreMalware(DetectorRequestDto detectorRequest) throws Exception {

        try {
            validateDetectorRequestData(detectorRequest);
        } catch (Exception e) {
            logger.error("Invalid request data detected !");
            throw e;
        }

        try {
            deviceDataRepository.save(detectorRequest.getDeviceData());
            for (DetectionData detectionData : detectorRequest.getDetectionDataList()) {
                detectionDataRepository.save(detectionData);
            }
        } catch (Exception e) {
            logger.error("Exception occured while storing detection data !");
            throw e;
        }

    }

    private void validateDetectorRequestData(DetectorRequestDto detectorRequest) throws Exception {

        validateDeviceData(detectorRequest.getDeviceData());

        for (DetectionData detectionData : detectorRequest.getDetectionDataList()) {
            setDetectionType(detectionData);
            validateDetectionData(detectionData);
        }
    }

    private void validateDeviceData(DeviceData deviceData) throws Exception {

        if (deviceData == null) {
            throw new Exception("DeviceData can not be null.");
        } else if (deviceData.getDeviceUUID() == null ||
                deviceData.getDeviceType() == null ||
                deviceData.getDeviceModel() == null ||
                deviceData.getDeviceOsVersion() == null) {
            throw new Exception("DeviceUUID, DeviceType, DeviceModel, and DeviceOsVersion are mandatory. All have to be filled.");
        } else if (!EnumDeviceType.WEB.equals(deviceData.getDeviceType()) ||
                !EnumDeviceType.ANDROID.equals(deviceData.getDeviceType()) ||
                !EnumDeviceType.IOS.equals(deviceData.getDeviceType())) {
            throw new Exception("DeviceType can only be WEB, ANDROID, or IOS.");
        }

    }

    private void validateDetectionData(DetectionData detectionData) throws Exception {

        if (!EnumDetectionTypes.NEW_DETECTION.equals(detectionData.getDetectionType()) ||
                !EnumDetectionTypes.RESOLVED_DETECTION.equals(detectionData.getDetectionType()) ||
                !EnumDetectionTypes.NO_DETECTION.equals(detectionData.getDetectionType())) {
            throw new Exception("DetectionType can only be NEW_DETECTION, RESOLVED_DETECTION, or NO_DETECTION.");
        }

    }

    private void setDetectionType(DetectionData detectionData) throws Exception {

        if (detectionData == null) {
            throw new Exception("DetectionData can not be null.");
        }

        if (detectionData.getDetectionId() != null &&
                detectionData.getDetectionTime() != null &&
                detectionData.getDetectionAppName() != null &&
                detectionData.getDetectionAppType() != null) {
            detectionData.setDetectionType(EnumDetectionTypes.NEW_DETECTION.name());
        } else if (detectionData.getDetectionId() != null &&
                detectionData.getDetectionTime() != null) {
            detectionData.setDetectionType(EnumDetectionTypes.RESOLVED_DETECTION.name());
        } else if (detectionData.getDetectionTime() != null) {
            detectionData.setDetectionType(EnumDetectionTypes.NO_DETECTION.name());
        }

    }

}
