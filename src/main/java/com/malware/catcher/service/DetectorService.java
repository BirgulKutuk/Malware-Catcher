package com.malware.catcher.service;

import com.malware.catcher.dto.DetectorResponseDto;
import com.malware.catcher.dto.RetrieveRequestDto;
import com.malware.catcher.model.DetectionData;
import com.malware.catcher.model.DeviceData;
import com.malware.catcher.model.EnumDetectionTypes;
import com.malware.catcher.model.EnumDeviceType;
import com.malware.catcher.repository.DetectionDataRepository;
import com.malware.catcher.repository.DeviceDataRepository;
import com.malware.catcher.specification.RetrieveRequestSpecificationsBuilder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import java.util.*;

@Service
public class DetectorService {

    private static final Logger logger = LoggerFactory.getLogger(DetectorService.class);

    @Autowired
    DeviceDataRepository deviceDataRepository;

    @Autowired
    DetectionDataRepository detectionDataRepository;

    public void detectAndStoreMalware(DeviceData deviceData, List<DetectionData> detectionDataList) throws Exception {

        try {
            validateDetectorRequestData(deviceData, detectionDataList);
        } catch (Exception e) {
            logger.error("Invalid request data detected !");
            throw e;
        }

        try {
            storeValidData(deviceData, detectionDataList);
        } catch (Exception e) {
            logger.error("Exception occured while storing detection data !");
            throw e;
        }
    }

    public void storeValidData(DeviceData deviceData, List<DetectionData> detectionDataList) {
        deviceDataRepository.save(deviceData);
        for (DetectionData detectionData : detectionDataList) {
            detectionDataRepository.save(detectionData);
        }
    }

    public void validateDetectorRequestData(DeviceData deviceData, List<DetectionData> detectionDataList) throws Exception {

        validateDeviceData(deviceData);

        for (DetectionData detectionData : detectionDataList) {
            setDetectionType(detectionData);
            validateDetectionData(detectionData);
        }
    }

    private void validateDeviceData(DeviceData deviceData) throws Exception {

        if (deviceData == null) {
            throw new Exception("DeviceData can not be null.");
        } else if (StringUtils.isEmpty(deviceData.getDeviceUUID()) ||
                StringUtils.isEmpty(deviceData.getDeviceType()) ||
                StringUtils.isEmpty(deviceData.getDeviceModel()) ||
                StringUtils.isEmpty(deviceData.getDeviceOsVersion())) {
            throw new Exception("DeviceUUID, DeviceType, DeviceModel, and DeviceOsVersion are mandatory. All have to be filled.");
        } else if (!EnumDeviceType.WEB.text.equals(deviceData.getDeviceType()) &&
                !EnumDeviceType.ANDROID.text.equals(deviceData.getDeviceType()) &&
                !EnumDeviceType.IOS.text.equals(deviceData.getDeviceType())) {
            throw new Exception("DeviceType can only be WEB, ANDROID, or IOS.");
        }
    }

    private void validateDetectionData(DetectionData detectionData) throws Exception {

        if (!EnumDetectionTypes.NEW_DETECTION.text.equals(detectionData.getDetectionType()) &&
                !EnumDetectionTypes.RESOLVED_DETECTION.text.equals(detectionData.getDetectionType()) &&
                !EnumDetectionTypes.NO_DETECTION.text.equals(detectionData.getDetectionType())) {
            throw new Exception("DetectionType can only be NEW_DETECTION, RESOLVED_DETECTION, or NO_DETECTION.");
        }
    }

    private void setDetectionType(DetectionData detectionData) throws Exception {

        if (detectionData == null) {
            throw new Exception("DetectionData can not be null.");
        }

        if (!StringUtils.isEmpty(detectionData.getDetectionId()) &&
                !StringUtils.isEmpty(detectionData.getDetectionTime()) &&
                !StringUtils.isEmpty(detectionData.getDetectionAppName()) &&
                !StringUtils.isEmpty(detectionData.getDetectionAppType())) {
            detectionData.setDetectionType(EnumDetectionTypes.NEW_DETECTION.name());
        } else if (!StringUtils.isEmpty(detectionData.getDetectionId()) &&
                !StringUtils.isEmpty(detectionData.getDetectionTime())) {
            detectionData.setDetectionType(EnumDetectionTypes.RESOLVED_DETECTION.name());
        } else if (!StringUtils.isEmpty(detectionData.getDetectionTime())) {
            detectionData.setDetectionType(EnumDetectionTypes.NO_DETECTION.name());
        }
    }

    public List<DetectorResponseDto> retrieveMalwares(RetrieveRequestDto retrieveRequestDto) {

        RetrieveRequestSpecificationsBuilder builder = new RetrieveRequestSpecificationsBuilder();

        // if any search parameter filled then add them to builder as a specification
        if (retrieveRequestDto != null) {
            if (Objects.nonNull(retrieveRequestDto.getDeviceUUID())) {
                builder.with("deviceUUID", ":", retrieveRequestDto.getDeviceUUID(), false, true);
            }
            if (Objects.nonNull(retrieveRequestDto.getDeviceType())) {
                builder.with("deviceType", ":", retrieveRequestDto.getDeviceType(), false, true);
            }
            if (Objects.nonNull(retrieveRequestDto.getDeviceModel())) {
                builder.with("deviceModel", ":", retrieveRequestDto.getDeviceModel(), false, true);
            }
            if (Objects.nonNull(retrieveRequestDto.getDeviceOsVersion())) {
                builder.with("deviceOsVersion", ":", retrieveRequestDto.getDeviceOsVersion(), false, true);
            }
            if (Objects.nonNull(retrieveRequestDto.getDetectionAppName())) {
                builder.with("detectionAppName", ":", retrieveRequestDto.getDetectionAppName(), false, false);
            }
            if (Objects.nonNull(retrieveRequestDto.getDetectionType())) {
                builder.with("detectionType", ":", retrieveRequestDto.getDetectionType(), false, false);
            }
        }


        // get all data with selected search parameter(s)
        Specification<DetectionData> spec = builder.build();
        List<DetectionData> detectionDataList = detectionDataRepository.findAll(spec);

        // convert data to response data type DetectorResponseDto
        List<DetectorResponseDto> detectorResponseDtoList = convertToDetectorResponseDto(detectionDataList);

        // Returns list of malware detections with the most recent detection at top
        detectorResponseDtoList.sort((h1, h2) -> h2.getDetectionTime().compareTo(h1.getDetectionTime()));

        return detectorResponseDtoList;
    }

    private List<DetectorResponseDto> convertToDetectorResponseDto(List<DetectionData> list) {

        List<DetectorResponseDto> detectorResponseDtoList = new ArrayList<>();

        for (DetectionData detectionData : list) {
            detectorResponseDtoList.add(new DetectorResponseDto(
                    detectionData.getDeviceData().getDeviceUUID(),
                    detectionData.getDeviceData().getDeviceType(),
                    detectionData.getDeviceData().getDeviceModel(),
                    detectionData.getDeviceData().getDeviceOsVersion(),
                    detectionData.getDetectionId(),
                    detectionData.getDetectionTime(),
                    detectionData.getDetectionAppName(),
                    detectionData.getDetectionAppType(),
                    detectionData.getDetectionType()
            ));
        }

        return detectorResponseDtoList;
    }

}
