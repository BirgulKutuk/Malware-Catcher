package com.malware.catcher.service;

import com.malware.catcher.dto.MalwareDetectorResponseDto;
import com.malware.catcher.dto.RetrieveRequestDto;
import com.malware.catcher.model.DetectionData;
import com.malware.catcher.repository.DetectionDataRepository;
import com.malware.catcher.repository.DeviceDataRepository;
import com.malware.catcher.specification.RetrieveRequestSpecificationsBuilder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@Service
public class MalwareDetectorRetrieveService {

    private static final Logger logger = LoggerFactory.getLogger(MalwareDetectorRetrieveService.class);

    @Autowired
    DeviceDataRepository deviceDataRepository;

    @Autowired
    DetectionDataRepository detectionDataRepository;

    public List<MalwareDetectorResponseDto> retrieveMalwares(RetrieveRequestDto retrieveRequestDto) {

        RetrieveRequestSpecificationsBuilder builder = new RetrieveRequestSpecificationsBuilder();

        // if any search parameter filled then add them to builder as a specification
        if (retrieveRequestDto != null) {
            if (Objects.nonNull(retrieveRequestDto.getDeviceUUID())) {
                builder.with("deviceUUID", ":", retrieveRequestDto.getDeviceUUID(), false, true);
            }
            if (Objects.nonNull(retrieveRequestDto.getDeviceType())) {
                builder.with("deviceType", ":", retrieveRequestDto.getDeviceType(), false, true);
            }
            if (Objects.nonNull(retrieveRequestDto.getDeviceModel())) {
                builder.with("deviceModel", ":", retrieveRequestDto.getDeviceModel(), false, true);
            }
            if (Objects.nonNull(retrieveRequestDto.getDeviceOsVersion())) {
                builder.with("deviceOsVersion", ":", retrieveRequestDto.getDeviceOsVersion(), false, true);
            }
            if (Objects.nonNull(retrieveRequestDto.getDetectionAppName())) {
                builder.with("detectionAppName", ":", retrieveRequestDto.getDetectionAppName(), false, false);
            }
            if (Objects.nonNull(retrieveRequestDto.getDetectionType())) {
                builder.with("detectionType", ":", retrieveRequestDto.getDetectionType(), false, false);
            }
        }

        // get all data with selected search parameter(s)
        Specification<DetectionData> spec = builder.build();
        List<DetectionData> detectionDataList = detectionDataRepository.findAll(spec);

        // convert data to response data type DetectorResponseDto
        List<MalwareDetectorResponseDto> malwareDetectorResponseDtoList = convertToDetectorResponseDto(detectionDataList);

        // Returns list of malware detections with the most recent detection at top
        malwareDetectorResponseDtoList.sort((h1, h2) -> h2.getDetectionTime().compareTo(h1.getDetectionTime()));

        return malwareDetectorResponseDtoList;
    }

    private List<MalwareDetectorResponseDto> convertToDetectorResponseDto(List<DetectionData> list) {

        List<MalwareDetectorResponseDto> malwareDetectorResponseDtoList = new ArrayList<>();

        for (DetectionData detectionData : list) {
            malwareDetectorResponseDtoList.add(new MalwareDetectorResponseDto(
                    detectionData.getDeviceData().getDeviceUUID(),
                    detectionData.getDeviceData().getDeviceType(),
                    detectionData.getDeviceData().getDeviceModel(),
                    detectionData.getDeviceData().getDeviceOsVersion(),
                    detectionData.getDetectionId(),
                    detectionData.getDetectionTime(),
                    detectionData.getDetectionAppName(),
                    detectionData.getDetectionAppType(),
                    detectionData.getDetectionType()
            ));
        }

        return malwareDetectorResponseDtoList;
    }

}
