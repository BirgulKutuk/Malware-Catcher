package com.malware.catcher;

import com.malware.catcher.model.DetectionData;
import com.malware.catcher.model.DeviceData;
import com.malware.catcher.model.EnumDetectionTypes;
import com.malware.catcher.repository.DetectionDataRepository;
import com.malware.catcher.repository.DeviceDataRepository;
import com.malware.catcher.service.MalwareDetectorStoreService;
import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;

import java.time.Instant;
import java.util.*;

@DataJpaTest
class MalwareDetectAndStoreValidTests {

    @Autowired
    DeviceDataRepository mockDeviceDataRepository;

    @Autowired
    DetectionDataRepository mockDetectionDataRepository;

    @InjectMocks
    MalwareDetectorStoreService mockMalwareDetectorStoreService;

    @Test
    public void storeValidNewDetectionData() throws Exception {

        // ANDROID data - NEW DETECTION
        DeviceData deviceDataAndroid = new DeviceData(1L, UUID.randomUUID(), "ANDROID", "Samsung", "v12", null);
        List<DetectionData> detectionDataAndroidList = new ArrayList<DetectionData>(Arrays.asList(
                new DetectionData(100L, UUID.randomUUID(), Instant.now().getEpochSecond(), "Facebook", "Social Media", null, deviceDataAndroid),
                new DetectionData(101L, UUID.randomUUID(), Instant.now().getEpochSecond(), "Instagram", "Social Media", null, deviceDataAndroid)
        ));
        mockMalwareDetectorStoreService.validateDetectorRequestData(deviceDataAndroid, detectionDataAndroidList);
        mockDeviceDataRepository.save(deviceDataAndroid);
        for (DetectionData detectionData_Android : detectionDataAndroidList) {
            mockDetectionDataRepository.save(detectionData_Android);
        }

        Optional<DeviceData> deviceDataAndroid_fromRepo = mockDeviceDataRepository.findById(1L);
        Assertions.assertThat(deviceDataAndroid_fromRepo.get().getDeviceModel()).isEqualTo("Samsung");

        List<DetectionData> detectionDataAndroid_fromRepo = mockDetectionDataRepository.findByDeviceDataScanId(1L);
        Assertions.assertThat(detectionDataAndroid_fromRepo.size()).isEqualTo(2);
        Assertions.assertThat(detectionDataAndroid_fromRepo.get(0).getDetectionType()).isEqualTo(EnumDetectionTypes.NEW_DETECTION.text);


        // IOS data - NEW DETECTION
        DeviceData deviceDataIOS = new DeviceData(2L, UUID.randomUUID(), "IOS", "IPhone", "max", null);
        List<DetectionData> detectionDataIOSList = new ArrayList<DetectionData>(Arrays.asList(
                new DetectionData(102L, UUID.randomUUID(), Instant.now().getEpochSecond(), "WhatsApp", "Chat", null, deviceDataIOS)
        ));
        mockMalwareDetectorStoreService.validateDetectorRequestData(deviceDataIOS, detectionDataIOSList);
        mockDeviceDataRepository.save(deviceDataIOS);
        for (DetectionData detectionData_IOS : detectionDataIOSList) {
            mockDetectionDataRepository.save(detectionData_IOS);
        }

        Optional<DeviceData> deviceDataIOS_fromRepo = mockDeviceDataRepository.findById(2L);
        Assertions.assertThat(deviceDataIOS_fromRepo.get().getDeviceModel()).isEqualTo("IPhone");

        List<DetectionData> detectionDataIOS_fromRepo = mockDetectionDataRepository.findByDeviceDataScanId(2L);
        Assertions.assertThat(detectionDataIOS_fromRepo.get(0).getDetectionAppType()).isEqualTo("Chat");


        // WEB data - NEW DETECTION
        DeviceData deviceDataWeb = new DeviceData(3L, UUID.randomUUID(), "WEB", "MSI", "63", null);
        List<DetectionData> detectionDataWebList = new ArrayList<>();
        mockMalwareDetectorStoreService.validateDetectorRequestData(deviceDataWeb, detectionDataWebList);
        mockDeviceDataRepository.save(deviceDataWeb);
        for (DetectionData detectionData_Web : detectionDataWebList) {
            mockDetectionDataRepository.save(detectionData_Web);
        }

        Optional<DeviceData> deviceDataWeb_fromRepo = mockDeviceDataRepository.findById(3L);
        Assertions.assertThat(deviceDataWeb_fromRepo.get().getDeviceType()).isEqualTo("WEB");

        List<DetectionData> detectionDataWeb_fromRepo = mockDetectionDataRepository.findByDeviceDataScanId(3L);
        Assertions.assertThat(detectionDataWeb_fromRepo.size()).isEqualTo(0);
    }

    @Test
    public void storeValidResolvedDetectionData() throws Exception {

        // ANDROID data - RESOLVED DETECTION
        DeviceData deviceDataAndroid = new DeviceData(1L, UUID.randomUUID(), "ANDROID", "Samsung", "v12", null);
        List<DetectionData> detectionDataAndroidList = new ArrayList<DetectionData>(Arrays.asList(
                new DetectionData(103L, UUID.randomUUID(), Instant.now().getEpochSecond(), null, null, null, deviceDataAndroid),
                new DetectionData(104L, UUID.randomUUID(), Instant.now().getEpochSecond(), null, null, null, deviceDataAndroid)
        ));
        mockMalwareDetectorStoreService.validateDetectorRequestData(deviceDataAndroid, detectionDataAndroidList);
        mockDeviceDataRepository.save(deviceDataAndroid);
        for (DetectionData detectionData_Android : detectionDataAndroidList) {
            mockDetectionDataRepository.save(detectionData_Android);
        }

        Optional<DeviceData> deviceDataAndroid_fromRepo = mockDeviceDataRepository.findById(1L);
        Assertions.assertThat(deviceDataAndroid_fromRepo.get().getDeviceModel()).isEqualTo("Samsung");

        List<DetectionData> detectionDataAndroid_fromRepo = mockDetectionDataRepository.findByDeviceDataScanId(1L);
        Assertions.assertThat(detectionDataAndroid_fromRepo.size()).isEqualTo(2);
        Assertions.assertThat(detectionDataAndroid_fromRepo.get(0).getDetectionType()).isEqualTo(EnumDetectionTypes.RESOLVED_DETECTION.text);

        // IOS data - RESOLVED DETECTION
        DeviceData deviceDataIOS = new DeviceData(2L, UUID.randomUUID(), "IOS", "IPhone", "max", null);
        List<DetectionData> detectionDataIOSList = new ArrayList<DetectionData>(Arrays.asList(
                new DetectionData(105L, UUID.randomUUID(), Instant.now().getEpochSecond(), null, null, null, deviceDataIOS)
        ));
        mockMalwareDetectorStoreService.validateDetectorRequestData(deviceDataIOS, detectionDataIOSList);
        mockDeviceDataRepository.save(deviceDataIOS);
        for (DetectionData detectionData_IOS : detectionDataIOSList) {
            mockDetectionDataRepository.save(detectionData_IOS);
        }

        Optional<DeviceData> deviceDataIOS_fromRepo = mockDeviceDataRepository.findById(2L);
        Assertions.assertThat(deviceDataIOS_fromRepo.get().getDeviceModel()).isEqualTo("IPhone");

        List<DetectionData> detectionDataIOS_fromRepo = mockDetectionDataRepository.findByDeviceDataScanId(2L);
        Assertions.assertThat(detectionDataIOS_fromRepo.size()).isEqualTo(1);
        Assertions.assertThat(detectionDataAndroid_fromRepo.get(0).getDetectionType()).isEqualTo(EnumDetectionTypes.RESOLVED_DETECTION.text);


        // WEB data - RESOLVED DETECTION
        DeviceData deviceDataWeb = new DeviceData(3L, UUID.randomUUID(), "WEB", "MSI", "63", null);
        List<DetectionData> detectionDataWebList = new ArrayList<DetectionData>(Arrays.asList(
                new DetectionData(106L, UUID.randomUUID(), Instant.now().getEpochSecond(), null, null, null, deviceDataWeb)
        ));
        mockMalwareDetectorStoreService.validateDetectorRequestData(deviceDataWeb, detectionDataWebList);
        mockDeviceDataRepository.save(deviceDataWeb);
        for (DetectionData detectionData_Web : detectionDataWebList) {
            mockDetectionDataRepository.save(detectionData_Web);
        }

        Optional<DeviceData> deviceDataWeb_fromRepo = mockDeviceDataRepository.findById(3L);
        Assertions.assertThat(deviceDataWeb_fromRepo.get().getDeviceModel()).isEqualTo("MSI");

        List<DetectionData> detectionDataWeb_fromRepo = mockDetectionDataRepository.findByDeviceDataScanId(3L);
        Assertions.assertThat(detectionDataWeb_fromRepo.size()).isEqualTo(1);
        Assertions.assertThat(detectionDataWeb_fromRepo.get(0).getDetectionType()).isEqualTo(EnumDetectionTypes.RESOLVED_DETECTION.text);
    }


    @Test
    public void storeValidNoDetectionData() throws Exception {

        // ANDROID data - NO DETECTION
        DeviceData deviceDataAndroid = new DeviceData(1L, UUID.randomUUID(), "ANDROID", "Samsung", "v12", null);
        List<DetectionData> detectionDataAndroidList = new ArrayList<DetectionData>(Arrays.asList(
                new DetectionData(107L, null, Instant.now().getEpochSecond(), null, null, null, deviceDataAndroid)
        ));
        mockMalwareDetectorStoreService.validateDetectorRequestData(deviceDataAndroid, detectionDataAndroidList);
        mockDeviceDataRepository.save(deviceDataAndroid);
        for (DetectionData detectionData_Android : detectionDataAndroidList) {
            mockDetectionDataRepository.save(detectionData_Android);
        }

        Optional<DeviceData> deviceDataAndroid_fromRepo = mockDeviceDataRepository.findById(1L);
        Assertions.assertThat(deviceDataAndroid_fromRepo.get().getDeviceModel()).isEqualTo("Samsung");

        List<DetectionData> detectionDataAndroid_fromRepo = mockDetectionDataRepository.findByDeviceDataScanId(1L);
        Assertions.assertThat(detectionDataAndroid_fromRepo.size()).isEqualTo(1);
        Assertions.assertThat(detectionDataAndroid_fromRepo.get(0).getDetectionType()).isEqualTo(EnumDetectionTypes.NO_DETECTION.text);

        // IOS data - NO DETECTION
        DeviceData deviceDataIOS = new DeviceData(2L, UUID.randomUUID(), "IOS", "IPhone", "max", null);
        List<DetectionData> detectionDataIOSList = new ArrayList<DetectionData>(Arrays.asList(
                new DetectionData(108L, null, Instant.now().getEpochSecond(), null, null, null, deviceDataIOS)
        ));
        mockMalwareDetectorStoreService.validateDetectorRequestData(deviceDataIOS, detectionDataIOSList);
        mockDeviceDataRepository.save(deviceDataIOS);
        for (DetectionData detectionData_IOS : detectionDataIOSList) {
            mockDetectionDataRepository.save(detectionData_IOS);
        }

        Optional<DeviceData> deviceDataIOS_fromRepo = mockDeviceDataRepository.findById(2L);
        Assertions.assertThat(deviceDataIOS_fromRepo.get().getDeviceModel()).isEqualTo("IPhone");

        List<DetectionData> detectionDataIOS_fromRepo = mockDetectionDataRepository.findByDeviceDataScanId(2L);
        Assertions.assertThat(detectionDataIOS_fromRepo.size()).isEqualTo(1);
        Assertions.assertThat(detectionDataAndroid_fromRepo.get(0).getDetectionType()).isEqualTo(EnumDetectionTypes.NO_DETECTION.text);


        // WEB data - NO DETECTION
        DeviceData deviceDataWeb = new DeviceData(3L, UUID.randomUUID(), "WEB", "MSI", "63", null);
        List<DetectionData> detectionDataWebList = new ArrayList<DetectionData>();
        mockMalwareDetectorStoreService.validateDetectorRequestData(deviceDataWeb, detectionDataWebList);
        mockDeviceDataRepository.save(deviceDataWeb);
        for (DetectionData detectionData_Web : detectionDataWebList) {
            mockDetectionDataRepository.save(detectionData_Web);
        }

        Optional<DeviceData> deviceDataWeb_fromRepo = mockDeviceDataRepository.findById(3L);
        Assertions.assertThat(deviceDataWeb_fromRepo.get().getDeviceModel()).isEqualTo("MSI");

        List<DetectionData> detectionDataWeb_fromRepo = mockDetectionDataRepository.findByDeviceDataScanId(3L);
        Assertions.assertThat(detectionDataWeb_fromRepo.size()).isEqualTo(0);
    }
}
